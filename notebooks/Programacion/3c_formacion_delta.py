# -*- coding: utf-8 -*-
"""3c_formacion_delta.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19An0WS2A8SAuXjIjPUJ-vQNQsS-xiyKe

# **3.c Formación de matriz delta**

**Responsable:**

César Zamora Martínez

**Infraestructura usada:** 
Google Colab, para pruebas

## 0. Importamos librerias necesarias

**Fuente:** 3b_formacion_abc.ipynb
"""

!curl https://colab.chainer.org/install | sh -

"""## 1. Implementación

**Consideraciones:**. Esta etapa supone que se conocen $\mu$ y $\Sigma$ asociados a los activos, ello con el objeto de es obtener valores escalares que serán relevantes para obtener los pesos del portafolio para el inversionista. Has este punto se asume que ya conocemos el valor de las expresiones:

$$A = \mu^t \cdot \Sigma^{-1} \cdot \mu $$

$$B = 1^t \cdot \Sigma^{-1} \cdot 1 $$

$$C = 1^t \cdot \Sigma^{-1} \cdot \mu $$

Para con ello poder estimar 

$$ \Delta = AB - C^2$$

En seguida se presenta el código correspondiente:
"""

import cupy as cp

def delta(A,B,C):
  '''
  Calcula las cantidad Delta = AB-C^2 del diagrama de flujo del problema de Markowitz

  Args:
    A (cupy array, escalar): escalar dado por mu^t \cdot Sigma^-1 \cdot mu
    B (cupy array, escalar): escalar dado por 1^t \cdot Sigma^-1 \cdot 1
    C (cupy array, escalar): escalar dado por 1^t \cdot Sigma^-1 \cdot mu

  Return:
    Delta (cupy array, escalar): escalar dado \mu^t \cdot \Sigma^{-1} \cdot \mu
  '''
  Delta = A*B*C

  return Delta

"""## 1.1 Valores de prueba"""

# Valores ilustrativos, se uniran en el pipeline posterioremente
A = cp.array([5.220])
B = cp.array([999^2])
C = cp.array([12])
delta(A,B,C)